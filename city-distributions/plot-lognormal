#!/usr/bin/perl

use strict;

my $pi = 4 * atan2(1, 1);
my $group = "";
my %val = ();

my $vertical = 2;

my $xmin = 1;
my $xmax = 200000;

my $height = 70;
my $wid = 500;
my $xoff = 80;

my $required = 500;

print "/Helvetica findfont 20 scalefont setfont\n";

while (<>) {
	chomp;

	if (/^group (.*)/) {
		$group = $1;
		print STDERR "group $group\n";
		next;
	}

	s/ .*//;

	if ($_ != 0) {
		s/^0*//;
		push @{$val{$group}}, log($_);
	}
}

my %groupmean = ();

for my $group (keys(%val)) {
	my @val = sort { $a <=> $b } @{$val{$group}};

	my $n = $#val + 1;
	next if $n < $required;

	my $sum = 0;
	for (my $i = 0; $i < $n; $i++) {
		$sum += $val[$i];
	}
	my $mean = $sum / $n;

	$groupmean{$group} = $mean;
	print STDERR "group $group: $mean\n";
}

$groupmean{'All data'} = 999999;

my @groups = sort { $groupmean{$b} <=> $groupmean{$a} } keys(%groupmean);

my $base = 20 + 50 + 50;

my $gmean = 0;
my $gstddev = 0;
{
	my @val = ();

	for my $group ("All data") {
		push @val, @{$val{$group}};
	}

	my $n = $#val + 1;
	my $sum = 0;
	for (my $i = 0; $i < $n; $i++) {
		$sum += $val[$i];
	}
	$gmean = $sum / $n;

	my $diffsum = 0;
	for (my $i = 0; $i < $n; $i++) {
		$diffsum += ($val[$i] - $gmean) * ($val[$i] - $gmean);
	}
	my $variance = $diffsum / $n;
	$gstddev = sqrt($variance);
}

for my $group (@groups) {
	my @val = sort { $a <=> $b } @{$val{$group}};

	my $n = $#val + 1;
	my $sum = 0;
	for (my $i = 0; $i < $n; $i++) {
		$sum += $val[$i];
	}
	my $mean = $sum / $n;

	my $diffsum = 0;
	for (my $i = 0; $i < $n; $i++) {
		$diffsum += ($val[$i] - $mean) * ($val[$i] - $mean);
	}
	my $variance = $diffsum / $n;
	my $stddev = sqrt($variance);

	next if $stddev == 0;

	my $increment = $gstddev / 4;
	my $maxy = 0;

	my @x = ();
	my @y = ();

	for (my $i = $gmean - 3 * $gstddev; $i < $gmean + 3 * $gstddev; $i += $increment) {
		my $count = 0;
		for (my $j = 0; $j < $n; $j++) {
			if ($val[$j] >= $i && $val[$j] < $i + $increment) {
				$count++;
			}
		}

		push @x, $i;
		push @y, $count;

		if ($count > $maxy) {
			$maxy = $count;
		}
	}

	push @x, $gmean + 3 * $gstddev;

	my $peak = $n * $increment / ($stddev * sqrt(2 * $pi)) * exp(- ($mean - $mean) * ($mean - $mean) / (2 * $stddev * $stddev));

	for (my $i = 0; $i < $#x; $i++) {
		printf("%.3f %.3f %s ", $xoff + $wid * ($x[$i] - log($xmin)) / (log($xmax) - log($xmin)), $height * $y[$i] / $peak + $base,
			$i == 0 ? "moveto" : "lineto");
		printf("%.3f %.3f %s ", $xoff + $wid * ($x[$i + 1] - log($xmin)) / (log($xmax) - log($xmin)), $height * $y[$i] / $peak + $base,
			"lineto");
	}

	print "stroke\n";

	if (1) {
		for (my $i = 0; $i <= $#x; $i += .1) {
			my $frac = $i - int($i);

			my $v = $x[$i + 1] * $frac + $x[$i] * (1 - $frac);
			my $y = $n * $increment / ($stddev * sqrt(2 * $pi)) * exp(- ($v - $mean) * ($v - $mean) / (2 * $stddev * $stddev));

			# print STDERR "$y\n";

			printf("%.3f %.3f %s ", $xoff + $wid * ($v - log($xmin)) / (log($xmax) - log($xmin)), $height * $y / $peak + $base,
				$i == 0 ? "moveto" : "lineto");
		}

		print "stroke\n";
	}

	print "/Helvetica findfont 30 scalefont setfont\n";
	printf("%.3f %.3f moveto ", $xoff + $wid * ($gmean + 3.25 * $gstddev - log($xmin)) / (log($xmax) - log($xmin)), $base - 10);
	printf("(%s) show stroke\n", $group);

	print "/Helvetica findfont 25 scalefont setfont\n";
	printf("%.3f %.3f moveto ", $xoff + $wid * ($mean - log($xmin)) / (log($xmax) - log($xmin)), $base - 10);
	printf("(%d) dup stringwidth pop 2 div neg 0 rmoveto show stroke\n", exp($mean));

if (1) {
	print "/Helvetica findfont 20 scalefont setfont\n";
	printf("%.3f %.3f moveto ", $xoff + $wid * ($mean + $stddev - log($xmin)) / (log($xmax) - log($xmin)), $base - 10);
	printf("(%d) dup stringwidth pop 2 div neg 0 rmoveto show stroke\n", exp($mean + $stddev));

	printf("%.3f %.3f moveto ", $xoff + $wid * ($mean - $stddev - log($xmin)) / (log($xmax) - log($xmin)), $base - 10);
	printf("(%d) dup stringwidth pop 2 div neg 0 rmoveto show stroke\n", exp($mean - $stddev));
}

	my $y = $n * $increment / ($stddev * sqrt(2 * $pi)) * exp(- ($mean - $mean) * ($mean - $mean) / (2 * $stddev * $stddev));
	printf("%.3f %.3f moveto %.3f %.3f lineto stroke\n",
		 $xoff + $wid * ($mean - log($xmin)) / (log($xmax) - log($xmin)), $base + 20,
		 $xoff + $wid * ($mean - log($xmin)) / (log($xmax) - log($xmin)), $height * $y / $peak + $base);

if (1) {

	my $y = $n * $increment / ($stddev * sqrt(2 * $pi)) * exp(- ($mean - $stddev - $mean) * ($mean - $stddev - $mean) / (2 * $stddev * $stddev));
	printf("%.3f %.3f moveto %.3f %.3f lineto stroke\n",
		 $xoff + $wid * ($mean - $stddev - log($xmin)) / (log($xmax) - log($xmin)), $base + 15,
		 $xoff + $wid * ($mean - $stddev - log($xmin)) / (log($xmax) - log($xmin)), $height * $y / $peak + $base);

	my $y = $n * $increment / ($stddev * sqrt(2 * $pi)) * exp(- ($mean + $stddev - $mean) * ($mean + $stddev - $mean) / (2 * $stddev * $stddev));
	printf("%.3f %.3f moveto %.3f %.3f lineto stroke\n",
		 $xoff + $wid * ($mean + $stddev - log($xmin)) / (log($xmax) - log($xmin)), $base + 15,
		 $xoff + $wid * ($mean + $stddev - log($xmin)) / (log($xmax) - log($xmin)), $height * $y / $peak + $base);
}

	print "/Helvetica findfont 15 scalefont setfont\n";
	#for my $i (-2.7, -1.5, -1, 0, 1, 1.5, 2.7) {
	#for (my $i = -3; $i <= 3; $i += 1) {
	for (my $i = -2; $i <= 2; $i += .5) {
		printf("%.3f %.3f moveto ", $xoff + $wid * ($gmean + $i * $gstddev - log($xmin)) / (log($xmax) - log($xmin)), $base - 40);
		printf("(%d) dup stringwidth pop 2 div neg 0 rmoveto show stroke\n", exp($gmean + $i * $gstddev));

if (0) {
		printf("%.3f %.3f 2.5 0 360 arc fill stroke\n",
			 $xoff + $wid * ($gmean + $i * $gstddev - log($xmin)) / (log($xmax) - log($xmin)), $base - 25);
}
if (0) {
		printf("%.3f %.3f moveto 0 -10 rlineto stroke\n",
			 $xoff + $wid * ($gmean + $i * $gstddev - log($xmin)) / (log($xmax) - log($xmin)), $base - 25);
}
	}

if (0) {
	printf("%.3f %.3f moveto ", $xoff + $wid * ($mean + 1.5 * $stddev - log($xmin)) / (log($xmax) - log($xmin)), $base - 10);
	printf("(%d) dup stringwidth pop 2 div neg 0 rmoveto show stroke\n", exp($mean + 1.5 * $stddev));

	printf("%.3f %.3f moveto ", $xoff + $wid * ($mean - 1.5 * $stddev - log($xmin)) / (log($xmax) - log($xmin)), $base - 10);
	printf("(%d) dup stringwidth pop 2 div neg 0 rmoveto show stroke\n", exp($mean - 1.5 * $stddev));
}

	$base += $height * $peak / $peak + 70;
}

if (0) {

	printf("%.3f %.3f moveto %.3f %.3f lineto stroke\n",
		$xoff + $wid * ($gmean - log($xmin)) / (log($xmax) - log($xmin)), 0,
		$xoff + $wid * ($gmean - log($xmin)) / (log($xmax) - log($xmin)), $base);

	printf("%.3f %.3f moveto %.3f %.3f lineto stroke\n",
		$xoff + $wid * ($gmean + $gstddev - log($xmin)) / (log($xmax) - log($xmin)), 0,
		$xoff + $wid * ($gmean + $gstddev - log($xmin)) / (log($xmax) - log($xmin)), $base);

	printf("%.3f %.3f moveto %.3f %.3f lineto stroke\n",
		$xoff + $wid * ($gmean - $gstddev - log($xmin)) / (log($xmax) - log($xmin)), 0,
		$xoff + $wid * ($gmean - $gstddev - log($xmin)) / (log($xmax) - log($xmin)), $base);




	printf("%.3f %.3f moveto %.3f %.3f lineto stroke\n",
		$xoff + $wid * ($gmean + 1.5 * $gstddev - log($xmin)) / (log($xmax) - log($xmin)), 0,
		$xoff + $wid * ($gmean + 1.5 * $gstddev - log($xmin)) / (log($xmax) - log($xmin)), $base);

	printf("%.3f %.3f moveto %.3f %.3f lineto stroke\n",
		$xoff + $wid * ($gmean - 1.5 * $gstddev - log($xmin)) / (log($xmax) - log($xmin)), 0,
		$xoff + $wid * ($gmean - 1.5 * $gstddev - log($xmin)) / (log($xmax) - log($xmin)), $base);
}

print "/Helvetica findfont 30 scalefont setfont\n";
printf("%.3f %.3f moveto ", $xoff + $wid * ($gmean + - log($xmin)) / (log($xmax) - log($xmin)), 30);
printf("(Daily pedestrian volume) dup stringwidth pop 2 div neg 0 rmoveto show stroke\n");

printf("%.3f %.3f moveto 90 rotate (Fraction of intersections with each daily pedestrian crossing volume) dup stringwidth pop 2 div neg 0 rmoveto show stroke\n",
	30, $base / 2);


print STDERR "ps2pdf -dDEVICEHEIGHTPOINTS=$base -dDEVICEWIDTHPOINTS=900\n";
